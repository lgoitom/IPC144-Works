During this workshop, we are becoming more comfortable with making prototypes and calling functions into other functions. One concept we were introduced to during this lab is if and else statements, which allow a program to satisfy multiple conditions efficiently. If the condition for the code is true then the code will run. Otherwise, the program will skip over and run the code for the other cases when it does not satisfy the first one. The condition for each if and else statement is contained within parentheses following after “if”, “else”, or “else if”. Arguments in if and else statements can have compound conditions which are various expressions that are split up by boolean operators. Common examples used during this workshop are ‘&&’, which is used when expressions are both true and false, ‘!=’, which means that the expressions are not equal to each other, and ‘==’, which means that the expressions are equal to each other. One part I had difficulty with was having the program reading the user input and producing the proper output based on what was input.

See citations